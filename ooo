-- =============================================
-- 1. SETUP TEST ENVIRONMENT (RUN ALL FIRST)
-- =============================================
USE ROLE SECURITYADMIN;

-- Create test roles
CREATE OR REPLACE ROLE TEST_DATA_OWNER;
CREATE OR REPLACE ROLE TEST_DATA_READER;

-- Create test user
CREATE OR REPLACE USER TEST_USER 
  PASSWORD = 'SecurePass123!'
  DEFAULT_ROLE = TEST_DATA_READER
  MUST_CHANGE_PASSWORD = FALSE;

-- Create test database
USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE PRIV_TEST_DB;
USE DATABASE PRIV_TEST_DB;

-- Create original and cloned schemas
CREATE OR REPLACE SCHEMA ORIGINAL_SCHEMA;
CREATE OR REPLACE SCHEMA CLONED_SCHEMA CLONE ORIGINAL_SCHEMA;

-- Grant sample privileges (valid schema privileges)
GRANT USAGE ON SCHEMA ORIGINAL_SCHEMA TO ROLE TEST_DATA_OWNER;
GRANT MONITOR ON SCHEMA ORIGINAL_SCHEMA TO ROLE TEST_DATA_READER;
GRANT CREATE TABLE ON SCHEMA ORIGINAL_SCHEMA TO USER TEST_USER WITH GRANT OPTION;

-- =============================================
-- 2. PRIVILEGE COPY PROCEDURE (WORKING CODE)
-- =============================================
CREATE OR REPLACE PROCEDURE COPY_SCHEMA_PRIVILEGES(
  SOURCE_SCHEMA STRING, 
  TARGET_SCHEMA STRING
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER -- Required for proper privilege escalation
AS
$$
DECLARE
  GRANT_COMMAND STRING;
  ERROR_INFO STRING;
  SOURCE_DB STRING DEFAULT SPLIT_PART(SOURCE_SCHEMA, '.', 1);
  SOURCE_SCHEMA_NAME STRING DEFAULT SPLIT_PART(SOURCE_SCHEMA, '.', 2);
  TARGET_DB STRING DEFAULT SPLIT_PART(TARGET_SCHEMA, '.', 1);
  TARGET_SCHEMA_NAME STRING DEFAULT SPLIT_PART(TARGET_SCHEMA, '.', 2);
  
  CURSOR GRANT_CURSOR IS
    SELECT 
      PRIVILEGE,
      GRANTEE_TYPE,
      GRANTEE_NAME,
      GRANT_OPTION
    FROM TABLE(
      INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
        OBJECT_TYPE => 'SCHEMA',
        OBJECT_NAME => :SOURCE_SCHEMA_NAME,
        DATABASE_NAME => :SOURCE_DB
      )
    )
    WHERE PRIVILEGE != 'OWNERSHIP';
BEGIN
  FOR GRANT_RECORD IN GRANT_CURSOR DO
    -- Construct grant statement with proper escaping
    GRANT_COMMAND := 'GRANT ' || GRANT_RECORD.PRIVILEGE || 
                    ' ON SCHEMA ' || :TARGET_DB || '.' || :TARGET_SCHEMA_NAME ||
                    ' TO ' || 
                    CASE GRANT_RECORD.GRANTEE_TYPE
                      WHEN 'ROLE' THEN 'ROLE "' || GRANT_RECORD.GRANTEE_NAME || '"'
                      WHEN 'USER' THEN 'USER "' || GRANT_RECORD.GRANTEE_NAME || '"'
                      ELSE RAISE_ERROR('Invalid grantee type: ' || GRANT_RECORD.GRANTEE_TYPE)
                    END ||
                    CASE WHEN GRANT_RECORD.GRANT_OPTION = 'YES' 
                         THEN ' WITH GRANT OPTION' 
                         ELSE '' 
                    END;
    
    -- Execute with error handling
    BEGIN
      EXECUTE IMMEDIATE :GRANT_COMMAND;
    EXCEPTION
      WHEN OTHER THEN
        ERROR_INFO := 'Failed on: ' || :GRANT_COMMAND || 
                     '\nError: ' || SQLCODE || ' - ' || SQLERRM;
        RETURN ERROR_INFO;
    END;
  END FOR;
  
  RETURN 'Success: Privileges copied from ' || :SOURCE_SCHEMA || ' to ' || :TARGET_SCHEMA;
END;
$$;

-- =============================================
-- 3. EXECUTION & VALIDATION (TEST EXAMPLE)
-- =============================================
-- Show original grants
SHOW GRANTS ON SCHEMA PRIV_TEST_DB.ORIGINAL_SCHEMA;

-- Execute the copy
CALL COPY_SCHEMA_PRIVILEGES(
  'PRIV_TEST_DB.ORIGINAL_SCHEMA', 
  'PRIV_TEST_DB.CLONED_SCHEMA'
);

-- Verify cloned privileges
SHOW GRANTS ON SCHEMA PRIV_TEST_DB.CLONED_SCHEMA;

-- Detailed validation query
SELECT 
  'ORIGINAL' AS SCHEMA_TYPE,
  PRIVILEGE,
  GRANTEE_TYPE,
  GRANTEE_NAME,
  GRANT_OPTION
FROM TABLE(
  INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
    OBJECT_TYPE => 'SCHEMA',
    OBJECT_NAME => 'ORIGINAL_SCHEMA',
    DATABASE_NAME => 'PRIV_TEST_DB'
  )
)
WHERE PRIVILEGE != 'OWNERSHIP'

UNION ALL

SELECT 
  'CLONED' AS SCHEMA_TYPE,
  PRIVILEGE,
  GRANTEE_TYPE,
  GRANTEE_NAME,
  GRANT_OPTION
FROM TABLE(
  INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
    OBJECT_TYPE => 'SCHEMA',
    OBJECT_NAME => 'CLONED_SCHEMA',
    DATABASE_NAME => 'PRIV_TEST_DB'
  )
)
ORDER BY 1, 2, 3;

-- =============================================
-- 4. CLEANUP (RUN WHEN DONE)
-- =============================================
USE ROLE SECURITYADMIN;
DROP USER TEST_USER;
DROP ROLE TEST_DATA_OWNER;
DROP ROLE TEST_DATA_READER;

USE ROLE SYSADMIN;
DROP DATABASE PRIV_TEST_DB;
DROP PROCEDURE COPY_SCHEMA_PRIVILEGES(STRING, STRING);