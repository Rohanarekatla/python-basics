-- ===================================================================
-- 1. Setup Test Environment
-- ===================================================================
USE ROLE USERADMIN;
CREATE OR REPLACE ROLE priv_copy_test_role;
CREATE OR REPLACE USER priv_copy_test_user 
  PASSWORD = 'TestPass123' 
  DEFAULT_ROLE = PUBLIC 
  MUST_CHANGE_PASSWORD = FALSE;

USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE priv_copy_db;
CREATE SCHEMA priv_copy_db.source_schema;
CREATE SCHEMA priv_copy_db.target_schema;

-- Grant privileges to test copying
GRANT USAGE ON SCHEMA priv_copy_db.source_schema TO ROLE priv_copy_test_role;
GRANT MONITOR ON SCHEMA priv_copy_db.source_schema TO ROLE PUBLIC;
GRANT CREATE TABLE ON SCHEMA priv_copy_db.source_schema TO USER priv_copy_test_user WITH GRANT OPTION;

-- ===================================================================
-- 2. Fixed Stored Procedure for Copying Schema Privileges
-- ===================================================================
CREATE OR REPLACE PROCEDURE COPY_SCHEMA_PRIVILEGES(
  source_schema STRING, 
  target_schema STRING
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  src_db_name STRING DEFAULT SPLIT_PART(source_schema, '.', 1);
  src_schema_name STRING DEFAULT SPLIT_PART(source_schema, '.', 2);
  tgt_db_name STRING DEFAULT SPLIT_PART(target_schema, '.', 1);
  tgt_schema_name STRING DEFAULT SPLIT_PART(target_schema, '.', 2);

  c1 CURSOR FOR 
    SELECT 
      privilege, 
      grantee_name, 
      grant_option 
    FROM INFORMATION_SCHEMA.SCHEMA_PRIVILEGES 
    WHERE table_catalog = src_db_name 
      AND table_schema = src_schema_name 
      AND privilege != 'OWNERSHIP';
  
  sql_stmt STRING;
BEGIN
  -- Iterate through each privilege and apply to target schema
  FOR rec IN c1 DO
    sql_stmt := 'GRANT ' || rec.privilege || 
                ' ON SCHEMA ' || tgt_db_name || '.' || tgt_schema_name || 
                ' TO ROLE ' || rec.grantee_name || 
                CASE WHEN rec.grant_option = 'YES' THEN ' WITH GRANT OPTION' ELSE '' END;
    
    EXECUTE IMMEDIATE sql_stmt;
  END FOR;

  RETURN 'Privileges copied successfully';
END;
$$;

-- ===================================================================
-- 3. Execute & Validate
-- ===================================================================
CALL COPY_SCHEMA_PRIVILEGES(
  'priv_copy_db.source_schema', 
  'priv_copy_db.target_schema'
);

-- Validation Query
WITH source_grants AS (
  SELECT 
    privilege,
    grantee_name,
    grant_option
  FROM INFORMATION_SCHEMA.SCHEMA_PRIVILEGES
  WHERE table_catalog = 'priv_copy_db'
    AND table_schema = 'source_schema'
    AND privilege != 'OWNERSHIP'
),
target_grants AS (
  SELECT 
    privilege,
    grantee_name,
    grant_option
  FROM INFORMATION_SCHEMA.SCHEMA_PRIVILEGES
  WHERE table_catalog = 'priv_copy_db'
    AND table_schema = 'target_schema'
    AND privilege != 'OWNERSHIP'
)

SELECT 
  'SOURCE' AS grant_source,
  COUNT(*) AS grant_count
FROM source_grants
UNION ALL
SELECT 
  'TARGET' AS grant_source,
  COUNT(*) AS grant_count
FROM target_grants;

-- ===================================================================
-- 4. Cleanup
-- ===================================================================
USE ROLE USERADMIN;
DROP USER priv_copy_test_user;
DROP ROLE priv_copy_test_role;

USE ROLE SYSADMIN;
DROP DATABASE priv_copy_db;
