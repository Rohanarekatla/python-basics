-- =============================================
-- 1. Setup Test Environment
-- =============================================
USE ROLE SECURITYADMIN;

-- Create test database
CREATE OR REPLACE DATABASE PRIVILEGE_COPY_DB;
USE DATABASE PRIVILEGE_COPY_DB;

-- Create source and target schemas
CREATE OR REPLACE SCHEMA SOURCE_SCHEMA;
CREATE OR REPLACE SCHEMA TARGET_SCHEMA;

-- Create test roles
CREATE OR REPLACE ROLE DATA_ENGINEER;
CREATE OR REPLACE ROLE DATA_SCIENTIST;

-- Create test user
CREATE OR REPLACE USER TEST_USER 
  PASSWORD = 'S3cur3P@ss!'
  DEFAULT_ROLE = PUBLIC
  MUST_CHANGE_PASSWORD = FALSE;

-- Grant valid schema privileges (as per Snowflake docs)
GRANT USAGE ON SCHEMA SOURCE_SCHEMA TO ROLE DATA_ENGINEER;
GRANT MONITOR ON SCHEMA SOURCE_SCHEMA TO ROLE DATA_SCIENTIST;
GRANT CREATE TABLE ON SCHEMA SOURCE_SCHEMA TO USER TEST_USER WITH GRANT OPTION;

-- =============================================
-- 2. Privilege Copy Procedure (Official Syntax)
-- =============================================
CREATE OR REPLACE PROCEDURE CLONE_SCHEMA_PRIVILEGES(
  source_schema_name STRING,
  target_schema_name STRING
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER -- Follows Snowflake's security best practices
AS
$$
DECLARE
  src_db STRING DEFAULT SPLIT_PART(source_schema_name, '.', 1);
  src_schema STRING DEFAULT SPLIT_PART(source_schema_name, '.', 2);
  tgt_db STRING DEFAULT SPLIT_PART(target_schema_name, '.', 1);
  tgt_schema STRING DEFAULT SPLIT_PART(target_schema_name, '.', 2);
  
  c1 CURSOR FOR 
    SELECT 
      privilege,
      grantee_name,
      grantee_type,
      grant_option
    FROM TABLE(
      INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
        OBJECT_TYPE => 'SCHEMA',
        OBJECT_NAME => :src_schema,
        DATABASE_NAME => :src_db
      )
    )
    WHERE privilege != 'OWNERSHIP';
  
  sql_stmt STRING;
BEGIN
  FOR record IN c1 DO
    -- Build grant statement with proper escaping
    sql_stmt := 'GRANT ' || record.privilege || 
               ' ON SCHEMA ' || :tgt_db || '.' || :tgt_schema ||
               ' TO ' || 
               CASE record.grantee_type
                 WHEN 'ROLE' THEN 'ROLE "' || record.grantee_name || '"'
                 WHEN 'USER' THEN 'USER "' || record.grantee_name || '"'
                 ELSE 'INVALID_GRANTEE'
               END ||
               CASE WHEN record.grant_option = 'YES' 
                    THEN ' WITH GRANT OPTION' 
                    ELSE '' 
               END;
    
    -- Validate before execution
    IF record.grantee_type NOT IN ('ROLE', 'USER') THEN
      CONTINUE;
    END IF;
    
    -- Execute with error handling
    BEGIN
      EXECUTE IMMEDIATE :sql_stmt;
    EXCEPTION
      WHEN OTHER THEN
        RETURN 'Failed: ' || :sql_stmt || ' | Error: ' || SQLERRM;
    END;
  END FOR;
  
  RETURN 'Successfully cloned privileges from ' || :source_schema_name || 
         ' to ' || :target_schema_name;
END;
$$;

-- =============================================
-- 3. Execution & Validation
-- =============================================
-- Execute with fully qualified names
CALL CLONE_SCHEMA_PRIVILEGES(
  'PRIVILEGE_COPY_DB.SOURCE_SCHEMA',
  'PRIVILEGE_COPY_DB.TARGET_SCHEMA'
);

-- Verify results
SELECT 
  'SOURCE' AS schema_type,
  privilege,
  grantee_type,
  grantee_name,
  grant_option
FROM TABLE(
  INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
    OBJECT_TYPE => 'SCHEMA',
    OBJECT_NAME => 'SOURCE_SCHEMA'
  )
)
WHERE privilege != 'OWNERSHIP'

UNION ALL

SELECT 
  'TARGET' AS schema_type,
  privilege,
  grantee_type,
  grantee_name,
  grant_option
FROM TABLE(
  INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
    OBJECT_TYPE => 'SCHEMA',
    OBJECT_NAME => 'TARGET_SCHEMA'
  )
)
ORDER BY 1, 2, 3;

-- =============================================
-- 4. Cleanup
-- =============================================
USE ROLE SECURITYADMIN;

DROP PROCEDURE CLONE_SCHEMA_PRIVILEGES(STRING, STRING);
DROP USER TEST_USER;
DROP ROLE DATA_ENGINEER;
DROP ROLE DATA_SCIENTIST;
DROP DATABASE PRIVILEGE_COPY_DB;