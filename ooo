-- =============================================
-- Corrected Test Environment Setup
-- =============================================
USE ROLE ACCOUNTADMIN;

-- Create test database
CREATE OR REPLACE DATABASE SP_TEST_DB;
USE DATABASE SP_TEST_DB;

-- Create schemas
CREATE OR REPLACE SCHEMA ORIGINAL_SCHEMA;
CREATE OR REPLACE SCHEMA RESTORED_SCHEMA CLONE ORIGINAL_SCHEMA;

-- Create test roles and user
CREATE OR REPLACE ROLE TEST_ROLE_1;
CREATE OR REPLACE ROLE TEST_ROLE_2;
CREATE OR REPLACE USER TEST_USER 
  PASSWORD = 'TestPassword123' 
  DEFAULT_ROLE = PUBLIC;

-- Grant database access to roles and user
GRANT USAGE ON DATABASE SP_TEST_DB TO ROLE TEST_ROLE_1;
GRANT USAGE ON DATABASE SP_TEST_DB TO ROLE TEST_ROLE_2;
GRANT USAGE ON DATABASE SP_TEST_DB TO TEST_USER;

-- Grant schema privileges to roles
GRANT USAGE ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA TO ROLE TEST_ROLE_1;
GRANT CREATE TABLE ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA TO ROLE TEST_ROLE_2;
GRANT USAGE ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA TO ROLE PUBLIC;

-- Grant schema privileges to user (correct syntax)
GRANT MONITOR ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA TO TEST_USER WITH GRANT OPTION;
GRANT CREATE EXTERNAL TABLE ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA TO TEST_USER WITH GRANT OPTION;

-- =============================================
-- Corrected Stored Procedure
-- =============================================
CREATE OR REPLACE PROCEDURE COPY_SCHEMA_PRIVILEGES(
    original_schema STRING,
    restored_schema STRING
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
    v_database STRING DEFAULT SPLIT_PART(:original_schema, '.', 1);
    v_schema STRING DEFAULT SPLIT_PART(:original_schema, '.', 2);
    
    c1 CURSOR FOR 
        SELECT *
        FROM TABLE(
            INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
                OBJECT_TYPE => 'SCHEMA',
                OBJECT_NAME => :v_schema,
                DATABASE_NAME => :v_database
            )
        )
        WHERE PRIVILEGE != 'OWNERSHIP';
    
    grant_sql STRING;
    row VARIANT;
BEGIN
    FOR row IN c1 DO
        grant_sql := 'GRANT ' || row.PRIVILEGE || 
                    ' ON SCHEMA ' || :restored_schema ||
                    ' TO ' || 
                    CASE 
                        WHEN row.GRANTEE_TYPE = 'ROLE' THEN 'ROLE ' || row.GRANTEE
                        WHEN row.GRANTEE_TYPE = 'USER' THEN row.GRANTEE
                        ELSE row.GRANTEE_TYPE || ' ' || row.GRANTEE
                    END ||
                    IFF(row.IS_GRANTABLE = 'YES', ' WITH GRANT OPTION', '');
        
        EXECUTE IMMEDIATE :grant_sql;
    END FOR;
    
    RETURN 'Privileges copied successfully from ' || :original_schema || 
           ' to ' || :restored_schema;
EXCEPTION
    WHEN OTHER THEN
        RETURN 'Error: ' || SQLERRM;
END;
$$;

-- =============================================
-- Execution & Validation
-- =============================================
-- Show original grants
SHOW GRANTS ON SCHEMA SP_TEST_DB.ORIGINAL_SCHEMA;

-- Execute the procedure
CALL COPY_SCHEMA_PRIVILEGES(
    'SP_TEST_DB.ORIGINAL_SCHEMA', 
    'SP_TEST_DB.RESTORED_SCHEMA'
);

-- Show copied grants
SHOW GRANTS ON SCHEMA SP_TEST_DB.RESTORED_SCHEMA;