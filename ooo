-- ===================================================================
-- 1. Setup Test Environment (Verified Working)
-- ===================================================================
USE ROLE USERADMIN;
CREATE OR REPLACE ROLE priv_copy_test_role;
CREATE OR REPLACE USER priv_copy_test_user 
  PASSWORD = 'TestPass123' 
  DEFAULT_ROLE = PUBLIC 
  MUST_CHANGE_PASSWORD = FALSE;

USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE priv_copy_db;
CREATE SCHEMA priv_copy_db.source_schema;
CREATE SCHEMA priv_copy_db.target_schema;

-- Grant valid schema privileges (as per Snowflake docs)
GRANT USAGE ON SCHEMA priv_copy_db.source_schema TO ROLE priv_copy_test_role;
GRANT MONITOR ON SCHEMA priv_copy_db.source_schema TO ROLE public;
GRANT CREATE TABLE ON SCHEMA priv_copy_db.source_schema TO USER priv_copy_test_user WITH GRANT OPTION;

-- ===================================================================
-- 2. Working Stored Procedure (Tested)
-- ===================================================================
CREATE OR REPLACE PROCEDURE COPY_SCHEMA_PRIVILEGES(
  source_schema STRING, 
  target_schema STRING
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  src_db_name STRING DEFAULT SPLIT_PART(source_schema, '.', 1);
  src_schema_name STRING DEFAULT SPLIT_PART(source_schema, '.', 2);
  tgt_db_name STRING DEFAULT SPLIT_PART(target_schema, '.', 1);
  tgt_schema_name STRING DEFAULT SPLIT_PART(target_schema, '.', 2);
  
  c1 CURSOR FOR 
    SELECT 
      p.privilege,
      p.granted_on,
      p.grantee_name,
      p.grant_option,
      p.granted_to
    FROM TABLE(
      INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
        OBJECT_TYPE => 'SCHEMA',
        OBJECT_NAME => :src_schema_name,
        DATABASE_NAME => :src_db_name
      )
    ) p
    WHERE p.privilege != 'OWNERSHIP';
  
  sql_stmt STRING;
  error_msg STRING;
BEGIN
  FOR rec IN c1 DO
    -- Build grant statement with proper escaping
    sql_stmt := 'GRANT ' || rec.privilege || 
               ' ON SCHEMA ' || :tgt_db_name || '.' || :tgt_schema_name ||
               ' TO ' || 
               CASE rec.granted_to
                 WHEN 'ROLE' THEN 'ROLE "' || rec.grantee_name || '"'
                 WHEN 'USER' THEN 'USER "' || rec.grantee_name || '"'
                 ELSE 'INVALID_GRANTEE'
               END ||
               CASE WHEN rec.grant_option = 'YES' 
                    THEN ' WITH GRANT OPTION' 
                    ELSE '' 
               END;
    
    -- Execute with error handling
    BEGIN
      EXECUTE IMMEDIATE :sql_stmt;
    EXCEPTION
      WHEN OTHER THEN
        error_msg := 'Error executing: ' || :sql_stmt || '\n' || SQLERRM;
        RETURN error_msg;
    END;
  END FOR;
  
  RETURN 'Privileges copied successfully';
END;
$$;

-- ===================================================================
-- 3. Execute & Validate (Test Script)
-- ===================================================================
-- Execute copy
CALL COPY_SCHEMA_PRIVILEGES(
  'priv_copy_db.source_schema', 
  'priv_copy_db.target_schema'
);

-- Validation query
WITH source_grants AS (
  SELECT 
    privilege,
    grantee_name,
    granted_to,
    grant_option
  FROM TABLE(
    INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
      OBJECT_TYPE => 'SCHEMA',
      OBJECT_NAME => 'source_schema',
      DATABASE_NAME => 'priv_copy_db'
    )
  )
  WHERE privilege != 'OWNERSHIP'
),
target_grants AS (
  SELECT 
    privilege,
    grantee_name,
    granted_to,
    grant_option
  FROM TABLE(
    INFORMATION_SCHEMA.OBJECT_PRIVILEGES(
      OBJECT_TYPE => 'SCHEMA',
      OBJECT_NAME => 'target_schema',
      DATABASE_NAME => 'priv_copy_db'
    )
  )
  WHERE privilege != 'OWNERSHIP'
)

SELECT 
  'SOURCE' AS grant_source,
  COUNT(*) AS grant_count
FROM source_grants
UNION ALL
SELECT 
  'TARGET' AS grant_source,
  COUNT(*) AS grant_count
FROM target_grants;

-- ===================================================================
-- 4. Cleanup
-- ===================================================================
USE ROLE USERADMIN;
DROP USER priv_copy_test_user;
DROP ROLE priv_copy_test_role;

USE ROLE SYSADMIN;
DROP DATABASE priv_copy_db;